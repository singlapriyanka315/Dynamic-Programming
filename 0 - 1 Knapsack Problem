//https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
          int dp[][]= new int[n+1][W+1];
          for(int i=0;i<=n;i++)
              for(int j=0;j<=W;j++)
                  dp[i][j]=-1;
             return knapSackRec(W,wt,val,n,dp);
        
    }
          static int knapSackRec(int W,int wt[], int val[], int n, int dp[][]){
              
          
         // your code here 
         // n and w coz 2 chize change ho rahi hai
    
         if( n==0 || W ==0 )  // base condition// i.e either no item left or no space left in knapsack
             return 0;// in this type of cases profit is 0
         
             if (dp[n][W]!=-1)
                 return dp[n][W];
                 
              if (wt[n-1]> W)
             return dp[n][W] = knapSackRec(W, wt, val, n-1,dp);
         
        else
             return dp[n][W]= Math.max((val[n-1] + knapSackRec ( W-wt[n-1], wt, val, n-1, dp)), knapSackRec (W, wt, val, n-1, dp));
         
    } 
}



